nonuniform_dagilim
hist(nonuniform_dagilim)
nonuniform_dagilim_oo <- orneklem_ort(nonuniform_dagilim, 2)
nonuniform_dagilim_oo
hist(nonuniform_dagilim_oo)
vektor1 <- 1:10
vektor2 <- 5*1:10
vektor2
plot(vektor1, vektor2)
cor(vektor1,vektor2)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140)
fiyat <- c(500,600,650,750,800,850,900,950)
)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
fiyat <- c(500,600,650,750,800,850,900,950)
)
veri
veri <- data.frame(
ev_no <- 1:8
alan <- c(70,80,90,100,110,120,130,140),
fiyat <- c(500,600,650,750,800,850,900,950)
)
veri
veri <- data.frame(
ev_no <- 1:8,
alan <- c(70,80,90,100,110,120,130,140),
fiyat <- c(500,600,650,750,800,850,900,950)
)
veri
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
fiyat <- c(500,600,650,750,800,850,900,950)
)
veri
colnames(veri) <- c("Alan","Fiyat")
veri
colnames(veri) <- c("Alan(m2)","Fiyat(*1000 TL")
veri
colnames(veri) <- c("Alan (m2)","Fiyat (*1000 TL)")
veri
cor(veri)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
fiyat <- c(500,600,650,750,800,850,900,950),
oda <- c(1,1,2,2,2,3,3,3)
)
colnames(veri) <- c("Alan (m2)","Fiyat (*1000 TL)", "Oda Sayisi")
veri
cor(veri)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
oda <- c(1,1,2,2,2,3,3,3)
fiyat <- c(500,700,850,950,800,650,900,950),
)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
oda <- c(1,1,2,2,2,3,3,3),
fiyat <- c(500,700,850,950,800,650,900,950)
)
colnames(veri) <- c("Alan (m2)","Fiyat (*1000 TL)", "Oda Sayisi")
veri
cor(veri)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
oda <- c(1,1,2,2,2,3,3,3),
fiyat <- c(500,700,850,900,600,750,600,950)
)
colnames(veri) <- c("Alan (m2)","Fiyat (*1000 TL)", "Oda Sayisi")
veri
cor(veri)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
veri <- data.frame(
alan <- c(70,80,90,100,110,120,130,140),
oda <- c(1,1,2,2,2,3,3,3),
fiyat <- c(500,700,850,900,600,750,600,950)
)
colnames(veri) <- c("Alan (m2)","Fiyat (*1000 TL)", "Oda Sayisi")
veri
cor(veri)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
colnames(veri) <- c("Alan (m2)", "Oda Sayisi","Fiyat (*1000 TL)")
veri
cor(veri)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`,veri$`Fiyat (*1000 TL)`)
plot(veri$`Oda Sayisi`, veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`, veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`, veri$`Oda Sayisi`)
plot(veri$`Alan (m2)`, veri$`Oda Sayisi`)
plot(veri$`Alan (m2)`, veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`, veri$`Oda Sayisi`)
plot(veri$`Alan (m2)`, veri$`Fiyat (*1000 TL)`)
plot(veri$`Alan (m2)`, veri$`Oda Sayisi`)
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,1,8)
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,1,8),
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
colnames(veri) <- c("Alan (m2)", "Oda Sayisi","Kat", "Fiyat (*1000 TL)")
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,1,8),
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
colnames(veri) <- c("Alan (m2)", "Oda Sayisi","Kat", "Fiyat (*1000 TL)")
colnames(veri) <- c("Alan (m2)", "Oda Sayisi", "Kat", "Fiyat (*1000 TL)")
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,1,8),
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,2,1,8),
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
colnames(veri) <- c("Alan (m2)", "Oda Sayisi", "Kat", "Fiyat (*1000 TL)")
veri
cor(veri)
colnames(veri) <- c("Alan", "Oda Sayisi", "Kat", "Fiyat")
veri
cor(veri)
### KORELASYON MATRISI
######################
vektor1 <- 1:10
vektor1
vektor2 <- 5*(1:10)
vektor2
plot(vektor1, vektor2)
cor(vektor1, vektor2)
### KORELASYON MATRISI
######################
vektor1 <- 1:10
vektor2 <- 5*vektor1
vektor1
vektor2
plot(vektor1, vektor2)
cor(vektor1, vektor2)
vektor3 <- rev(vektor1)
vektor3
cor(vektor1, vektor3)
plot(vektor1, vektor3)
# Korelasyon Matrisi
veri <- data.frame(
alan  <- c(60,70,80,90,100,110,120,130,140,150),
oda   <- c(1,1,2,2,2,3,3,3,4,4),
kat   <- c(1,5,3,4,2,3,4,2,1,8),
fiyat <- c(500,700,850,900,600,750,600,800,700,950)
)
veri
colnames(veri) <- c("Alan", "OdaSayisi", "BulunduguKat", "Fiyat (*1000)")
veri
cor(veri)
plot(veri$Alan, veri$OdaSayisi)
plot(veri$Alan, veri$BulunduguKat)
pnorm(27.4, mean=50, sd=20)
pnorm(27.4, 50, 20)
plot(pnorm(27.4, 50, 20))
getwd()
veri <- read.csv("./data/udemy_aracfiyatlari.csv")
getwd()
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
veri
View(veri)
cor(veri)
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
cor(veri)
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
cor(veri)
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
cor(veri)
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
cor(veri)
summary(veri)
# Gorsellestirmeler
hist(veri$fiyat)
plot(veri$modelyili, veri$fiyat)
plot(veri$kilometre, veri$fiyat)
abline()
abline(veri$kilometre, veri$fiyat)
runif(1,100,10)
runif(1:100,10)
sample(1:100,10)
veri[rastgele_indisler,]
rastgele_indisler <- sample(1:100,10)
veri[rastgele_indisler,]
lm(veri$fiyat ~ veri$fiyat)
lm(veri$fiyat ~ veri$kilometre)
model1 <- lm(veri$fiyat ~ veri$kilometre)
model1$coefficients
model1$coefficients[1]
fiyat_tahmini <- function(kilometre){
return(kilometre*model1$coefficients[2] + model1$coefficients[1])
}
fiyat_tahmini(0)
fiyat_tahmini(1000)
fiyat_tahmini(10000)
fiyat_tahmini(test_verisi)
model1 <- lm(model_verisi$fiyat ~ model_verisi$kilometre)
model1 <- lm(model_verisi$fiyat ~ model_verisi$kilometre)
rastgele_indisler <- sample(1:100,10)
veri[rastgele_indisler,] -> test_verisi
veri[-rastgele_indisler,] -> model_verisi
model1 <- lm(model_verisi$fiyat ~ model_verisi$kilometre)
model1$coefficients
fiyat_tahmini <- function(kilometre){
return(kilometre*model1$coefficients[2] + model1$coefficients[1])
}
fiyat_tahmini(10000)
model1$coefficients
#fiyat tahmini
kilometre <- 10000
model1$coefficients[1] + kilometre*model1$coefficients[2]
fiyat_tahmini(test_verisi)
fiyat_tahmini(test_verisi$kilometre)
test_verisi$fiyat
plot(x,y)
fiyat_tahmini(test_verisi$kilometre) -> y
test_verisi$fiyat -> x
plot(x,y)
model1$model
model1$fitted.values
# Veriyi yukleme ve inceleme
veri <- read.csv("./Desktop/data/udemy_aracfiyatlari.csv", sep=",", header=T)
veri
View(veri)
summary(veri)
# Korelasyon matrisi
cor(veri)
# Gorsellestirmeler
hist(veri$fiyat)
plot(veri$kilometre, veri$fiyat)
model1 <- lm(veri$fiyat ~ veri$kilometre)
model1$model
model1$fitted.values
model1$coefficients
#fiyat tahmini
kilometre <- 10000
model1$coefficients[1] + kilometre*model1$coefficients[2]
model1$coefficients[1] + kilometre*model1$coefficients[2]
as.integer(model1$coefficients[1] + kilometre*model1$coefficients[2])
model1$residuals
model1$xlevels
model1$rank
summary(model1)
# Korelasyon matrisi
kormat <- cor(veri)
kormat
predict(model1, kilometre)
predict(model1, kilometre=100)
predict(model1, newdata=kilometre)
#fiyat tahmini
kilometre <- data.frame(kilometre=c(0,10000,50000))
predict(model1, newdata=kilometre)
#fiyat tahmini
kilometre <- data.frame(kilometre=c(0,10000,50000))
predict(model1, newdata=kilometre)
veri
#fiyat tahmini
yeni_veri <- data.frame(kilometre=c(0,10000,50000))
predict(model1, newdata=yeni_veri)
#fiyat tahmini
yeni_veri <- data.frame(kilometre=c(0,10000,50000))
yeni_veri
predict(model1, 100000)
predict(model1, newdata=100000)
predict(model1, newdata=c(100000,20000))
summary(model1)
# Veriyi adlandirma
colnames(veri)
# Veriyi adlandirma
str(veri)
# Coklu regresyon modeli
model1 <- lm(fiyat ~ kilometre, data=veri)
summary(model1)
model1$fitted.values
model1$coefficients
#fiyat tahmini
yeni_veri <- data.frame(kilometre=c(0,10000,50000))
predict(model1, 100000)
predict(model1, newdata=yeni_veri)
# Coklu regresyon modeli
model2 <- lm(fiyat ~ ., data=veri)
# Coklu regresyon modeli
model2 <- lm(fiyat ~ ., data=veri)
summary(model2)
model2$fitted.values
model2$coefficients
#fiyat tahmini
yeni_veri2 <- data.frame(kilometre=2020,
boyaliparca=2,
degisenparca=0,
hasarkaydi=2000)
predict(model2, newdata=yeni_veri2)
#fiyat tahmini
yeni_veri2 <- data.frame(modelyili=2020,
kilometre=5000,
boyaliparca=2,
degisenparca=0,
hasarkaydi=2000)
predict(model2, newdata=yeni_veri2)
summary(model2)
# MODELI-TEST ETME
rastgele_indisler <- runif(1:100,3)
# MODELI-TEST ETME
rastgele_indisler <- sample(1:100,3)
# MODELI-TEST ETME
(rastgele_indisler <- sample(1:100,3))
# MODELI-TEST ETME
(rastgele_indisler <- sample(1:100,3))
# MODELI-TEST ETME
(rastgele_indisler <- sample(1:100,3))
model3 <- lm(fiyat ~ . , data=model_verisi)
summary(model3)
summary(model2)
summary(model3)
test_verisi
rastgele_indisler
veri[rastgele_indisler,] -> test_verisi
test_verisi
veri[-rastgele_indisler,] -> model_verisi
model3 <- lm(fiyat ~ . , data=model_verisi)
summary(model3)
dim(model_verisi)
predict(model3, newdata=test_verisi)
test_verisi
install.packages("e1071")
library(e1071)
library(e1071)
library(e10171)
library(e1071)
# LIBRARIES
##########################
library(caret)
library(caret)
library(e1071)
library(randomForest)
# CREATING IMBALANCED DATA
##########################
# Creating the feature vectors
vec1 <- rep("YES",100)
vec2 <- rep("YES",100)
vec3 <- rep("OK",100)
# Randomly assigning some "NO"s and "NOK"s into the Vectors to generate imbalanced data
vec1[sample(1:100,5)] <- "NO"
vec2[sample(1:100,5)] <- "NO"
vec3[sample(1:100,5)] <- "NOK"
# Creating the dataframe
dataset <- data.frame(X1=vec1, X2=vec2, Y=vec3)
summary(dataset)
# Sourcing ML model functions
setwd("/Users/ugururessn/Desktop/MYGIT/temp")
source("./caret_functions.R")
# Splitting the dataset
set.seed(1000)
dataset_splitted <- partition(dataset, factor=dataset$Y, trainsize=0.8)
summary(dataset_splitted$train)
summary(dataset_splitted$test)
# Creating ML model
ml_algorithm  <- "rf"
num_cv_rep    <- 5
tune_length   <- 20
show_train    <- TRUE
### TRAINING THE MODEL
msg_training = paste("\n", ml_algorithm, "algoritması egitiliyor...\n", sep=" ")
model_ml <- train_model(dataset_splitted$train, ml_algorithm, num_cv_rep, tune_length, show_train, msg_training)
plot(model_ml)
# Creating ML model
ml_algorithm  <- "rf"
num_cv_rep    <- 5
tune_length   <- 100
show_train    <- TRUE
### TRAINING THE MODEL
msg_training = paste("\n", ml_algorithm, "algoritması egitiliyor...\n", sep=" ")
model_ml <- train_model(dataset_splitted$train, ml_algorithm, num_cv_rep, tune_length, show_train, msg_training)
plot(model_ml)
# Creating ML model
ml_algorithm  <- "rf"
num_cv_rep    <- 5
tune_length   <- 1000
show_train    <- TRUE
### TRAINING THE MODEL
msg_training = paste("\n", ml_algorithm, "algoritması egitiliyor...\n", sep=" ")
model_ml <- train_model(dataset_splitted$train, ml_algorithm, num_cv_rep, tune_length, show_train, msg_training)
plot(model_ml)
model_ml$results
### ACCURACY CALCULATION & PRINTING
acc_model <- 100*get_accuracy(model_ml, dataset_splitted$test)
cat(sprintf("MODEL SONUCLARI:
Model Egitim Basarisi: %%%#.1f\nModel Test Basarisi: %%%#.1f\n",
acc_model[1], acc_model[2]))
confusionMatrix(model_ml)
summary(dataset)
summary(dataset_splitted$train)
summary(dataset_splitted$test)
confusionMatrix(model_ml)
cat(sprintf("MODEL SONUCLARI:
Model Egitim Basarisi: %%%#.1f\nModel Test Basarisi: %%%#.1f\n",
acc_model[1], acc_model[2]))
### ACCURACY CALCULATION & PRINTING
acc_model <- 100*get_accuracy(model_ml, dataset_splitted$test)
cat(sprintf("MODEL SONUCLARI:\nModel Egitim Basarisi: %%%#.1f\nModel Test Basarisi: %%%#.1f\n",
acc_model[1], acc_model[2]))
confusionMatrix(model_ml)
summary(dataset_splitted$train)
# LIBRARIES
##########################
library(caret)
library(e1071)
library(randomForest)
# CREATING IMBALANCED DATA
##########################
# Creating the feature vectors
vec1 <- rep("YES",100)
vec2 <- rep("YES",100)
vec3 <- rep("OK",100)
# Randomly assigning some "NO"s and "NOK"s into the Vectors to generate imbalanced data
vec1[sample(1:100,5)] <- "NO"
vec2[sample(1:100,5)] <- "NO"
vec3[sample(1:100,5)] <- "NOK"
# Creating the dataframe
dataset <- data.frame(X1=vec1, X2=vec2, Y=vec3)
summary(dataset)
# Sourcing ML model functions
setwd("/Users/ugururessn/Desktop/MYGIT/temp")
source("./caret_functions.R")
# Splitting the dataset
set.seed(1000)
dataset_splitted <- partition(dataset, factor=dataset$Y, trainsize=0.8)
summary(dataset_splitted$train)
summary(dataset_splitted$test)
# Creating ML model
ml_algorithm  <- "rf"
num_cv_rep    <- 1
tune_length   <- 100
show_train    <- TRUE
### TRAINING THE MODEL
msg_training = paste("\n", ml_algorithm, "algoritması egitiliyor...\n", sep=" ")
model_ml <- train_model(dataset_splitted$train, ml_algorithm, num_cv_rep, tune_length, show_train, msg_training)
plot(model_ml)
model_ml$results
### ACCURACY CALCULATION & PRINTING
acc_model <- 100*get_accuracy(model_ml, dataset_splitted$test)
cat(sprintf("MODEL SONUCLARI:\nModel Egitim Basarisi: %%%#.1f\nModel Test Basarisi: %%%#.1f\n",
acc_model[1], acc_model[2]))
confusionMatrix(model_ml)
model_ml$results
# LIBRARIES
##########################
library(caret)
library(e1071)
library(randomForest)
# CREATING IMBALANCED DATA
##########################
# Creating the feature vectors
vec1 <- rep("YES",100)
vec2 <- rep("YES",100)
vec3 <- rep("OK",100)
# Randomly assigning some "NO"s and "NOK"s into the Vectors to generate imbalanced data
vec1[sample(1:100,5)] <- "NO"
vec2[sample(1:100,5)] <- "NO"
vec3[sample(1:100,5)] <- "NOK"
# Creating the dataframe
dataset <- data.frame(X1=vec1, X2=vec2, Y=vec3)
summary(dataset)
# Sourcing ML model functions
setwd("/Users/ugururessn/Desktop/MYGIT/temp")
source("./caret_functions.R")
# Splitting the dataset
set.seed(1000)
dataset_splitted <- partition(dataset, factor=dataset$Y, trainsize=0.8)
summary(dataset_splitted$train)
summary(dataset_splitted$test)
# Creating ML model
ml_algorithm  <- "rf"
num_cv_rep    <- 1
tune_length   <- 1
show_train    <- TRUE
### TRAINING THE MODEL
msg_training = paste("\n", ml_algorithm, "algoritması egitiliyor...\n", sep=" ")
model_ml <- train_model(dataset_splitted$train, ml_algorithm, num_cv_rep, tune_length, show_train, msg_training)
plot(model_ml)
model_ml$results
### ACCURACY CALCULATION & PRINTING
acc_model <- 100*get_accuracy(model_ml, dataset_splitted$test)
cat(sprintf("MODEL SONUCLARI:\nModel Egitim Basarisi: %%%#.1f\nModel Test Basarisi: %%%#.1f\n",
acc_model[1], acc_model[2]))
confusionMatrix(model_ml)
summary(dataset)
summary(dataset_splitted$train)
summary(dataset_splitted$test)
confusionMatrix(model_ml)
confusionMatrix(model_ml$results)
confusionMatrix(model_ml$results)
model_ml$results
model_ml$finalModel
model_ml$finalModel
